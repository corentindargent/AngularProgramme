
{"address":"Address","altitude":4.456,"reference":"Reference","land_number":"Land_Number","longit
ude":3.345,"cartesian":{"points":[{"x":1.235,"y":4.346},{"x":2.457,"y":5.568},{"x":3.679,"y":6.78}]},"lati
tude":2.123

"address":site.address,"altitude":4.456,"reference":site.reference,"land_number":site.land_number,"longitude":firstPoint.lng(),"cartesian":{"points":cartesianPoints},"latitude":firstPoint.lat()

{"address":"1645","altitude":4.456,"reference":"Refereocne Yo","land_number":"8146","longitude":4.660320278489962,
,"latitude":50.70472078502399}
"cartesian":{"points":["{x:50.70472078502399, y :4.660320278489962},","{x:50.59195560903164, y :4.562816616380587},","{x:50.615924518530534, y :4.886913296068087},"]}
"cartesian":{"points":[{"x":1.235,"y":4.346},{"x":2.457,"y":5.568},{"x":3.679,"y":6.78}]}

if(REGEX_POSTAL_ADDRESS.test(this.adressePostal))
			{
				this.errorMessage="Adresse correct";
			}
			else
			{
				this.errorMessage="Adresse incorrect";
			}		
			
			
			
			app compoenent
				methode addPocyogn
					
					//this.drawingManager.setOptions({drawingControl: true,});
		//this.addSite = true;
		
		
		
		let headers = new Headers();
		headers.append('Content-Type', 'application/json');
		headers.append('Authorization : Bearer', `token`);
		
		
		
		let polygonForme = [ {'x' : 59, 'y' : 96},{'x' :1,'y' :41}];
		
		
		
		
		ajout tokeb
		let headers = new Headers({ 'Authorization': 'Bearer token'});
        this.options = new RequestOptions({ headers: headers }); 
		
		
		
		
			 
		this.siteService.addSite(this.newSIte).subscribe(location => {
    console.log('create result received:'+location);
    console.log('create result received. locationId:'+location);  });
	
	
	
	
	app component
	
	addPolygons(bool: boolean){
		var polygonForme = [
		  [1, 2],
		  [3, 4],
		  [5, 6]
		];
		
		this.newSIte = new Site("RefSite","adrSite",138,45.6,95.6,14.2,polygonForme);
			 
			this.siteService.addSite(this.newSIte).subscribe(location => {
			console.log('create result received:'+location);
			console.log('create result received. locationId:'+location);    

		});
   
	}
	/*"reference" : site.reference,
		"address" : site.Address,
	    "land_number" : site.Land_number,
		"latitude" : site.Latitude,
		"longitude" : site.Longitude,
		"cartesian" : {"points":site.polygon},
		"altitude"	:site.Alitutde*/
	
	
getSiteAndBuild()
   {
	  return this.http.get("http://indoor.traxxeo.com/service/site/listAll")
	  .map((res:Response) => res.json())
		.catch((error) => {console.log(error.json());return error.json(); });	   
	   
   }
   
   
   SOLUTION AU FAIT QUE LA METHODE DU COMPONENT ASSOCIE A UN LISTNER PUISSE ACCEDER AU VARIABLE ET FUNCTION DU COMPONENT LES DECLARER STATIC
   
   
   
   
   
   
   export class Site {
	
	 reference: string;
     address : string;
	 land_number  : number;
	 latitude : number;
	 longitude  : number;
	 altitude   : number;
     polygon: number[][]; 
	 site_id : number;
	 listBuidling : Building[];
	
	
	
	
    constructor( options: {
		reference?: string,
		address? : string,
		land_number? : number,
		latitude? : number,
		longitude?  : number,
		altitude? : number,
		polygon?: number[][],
		site_id? : number,
	    listBuidling? : Building[]
	} = {}){
		
		this.reference = options.reference || '';
		this.address = options.address || '';
		this.land_number = options.land_number || null;
		this.latitude = options.latitude || null;
		this.longitude = options.longitude || null;
		this.altitude = options.altitude || null;	
		this.polygon = options.polygon || null;
		this.site_id = options.site_id || null;
		this.listBuidling = options.listBuidling || null;
			
	}
   
}


export class Building  {	
	
	building_id : number; 
	reference: string;    
	latitude  : number;
	longitude  : number;
	alitutde    : number;
	orientation : number;
	polygon: Array<number[]>;
	site_id : number;
	
   constructor( options: {
		building_id?: number,
		reference? : string,
		latitude? : number,
		longitude?  : number,
		alitutde? : number,
		orientation? : number,
		polygon?: number[][],
		site_id? : number,	    
	} = {}){
		
		this.reference = options.reference || '';		
		this.latitude = options.latitude || null;
		this.longitude = options.longitude || null;
		this.alitutde = options.alitutde || null;	
		this.orientation = options.orientation || null;
		this.polygon = options.polygon || null;
		this.site_id = options.site_id || null;		
			
	}
}

------

	/* constructor(reference,addresse,land_number,latitude,	
		longitude,altitude,polygon,site_id,listBuidling) 
	{  
		this.reference = reference || '';
		this.addresse  = addresse  || '';
		this.land_number = land_number || -1;
		this.latitude = latitude || -1;
		this.longitude = longitude || -1;
		this.altitude = altitude || -1;
		this.polygon = polygon || null;
		this.site_id = site_id || -1;
		this.listBuidling = listBuidling || null;
	}
	 */
	 
	 ava,t validation
	 
	 <div *ngIf="isNewSite" >
					<h1 [ngStyle]="{'color':'red'}" >Nouveau Site</h1>
					<form  id="formulaire"  class="simple-form" (submit)="addNewInstance()"  >
					
					  <div class="form-group">
						<label for="nom">Reference:</label>
						<input #name="ngModel" type="text" class="form-control required" required id="nom"
							[(ngModel)] = "newSite.reference" name="address"	name="nomSite"	/>
						<label *ngIf="name.control.hasError(required) && (name.touched)"
						class="alert alert-danger validation-message">Référence requise</label>
					  </div>
					  
					  <div class="form-group">
						<label for="adressePostal">Adresse postal:</label>
						<input type="text" class="form-control required" id="adressePostal" required
						[(ngModel)] = "newSite.address" name="address" placeholder="ex: Edouard Belin,50b">
					  </div>
					  
					  <div class="form-group">
						<label for="landTittleNumber">Numéro du Site au registre Régional:</label>
						<input type="text" class="form-control" id="landTittleNumber" required
						[(ngModel)] = "newSite.land_number" name="landNumber" placeholder="ex: 001848">
					  </div>
					  
					  <div id="error" [ngStyle]="{'color':'red'}"> {{errorMessage}}				  </div>			  
					  <button id="send" type="submit" (click)="addNewInstance()" class="btn btn-default" >Submit</button>
					</form>
				</div><!-- form site-->	
				
				
				
				
				
				
				siteList=> {
								
				console.log(siteList);
				console.log(this.siteListes);
				//console.log(this.siteListes[0].sitePolygon.length);				
			},
			
			
			
			
			
			
			
			
			
			
FORMULAIRE MODIF SITE AVEC AUTRES CHAMPS MODIFIABLES


	  <!-- FAUT QUE LA MTHODE LISTALL RETOURNE TOUTES LES DONN2ES CONCERNAT LE SITE ET LE BUILDING  ETANT DONN2E QUE LA MODIF SE FAIT EN RENVOYANT L4OBJ DE BASE + LES EVENTUELS MODIF-->
						  
						 <!--  <div class="form-group">
							<label for="adressePostal">Adresse postal:</label>
							<input #adresse="ngModel" type="text" class="form-control required" id="adressePostal" required
							[(ngModel)] = "sites_list[selectedSite].address" name="address" placeholder="ex: Edouard Belin,50b"/>
						  
							<p *ngIf="adresse.control.hasError('required') && (adresse.touched)"
							class="alert alert-danger validation-message">Adresse requise</p>
							
						  </div><!--/input adresse -->
						  
						 <!-- <div class="form-group">
							<label for="landTittleNumber">Numéro du Site au registre Régional:</label>
							<input #land_number="ngModel" type="text" class="form-control" id="landTittleNumber" required
							[(ngModel)] = "sites_list[selectedSite].land_number" name="landNumber" placeholder="ex: 001848"/> -->

								<p *ngIf="land_number.control.hasError('required') && (land_number.touched)"
															class="alert alert-danger validation-message">Adresse requise</p>
							
						 </div><!--/input landNumber -->


			
			
			
			
			
			<div *ngIf="modifSite" >
						<h1 [ngStyle]="{'color':'red'}" >Modification Site</h1>

						<select  #selectSite="ngModel" class="form-control"  id="site_id" name="site_id" [(ngModel)]="newBuilding.site_id" >
								<option *ngFor="let site of sites_list"
								[value]="site.site_id">Site : {{site.site_id }}</option>							
							</select>
						<form   #formBuilding="ngForm" id="formulaire"  class="simple-form" >
						
						  <div class="form-group">
							<label for="nom">Reference:</label>
							<input #name="ngModel" type="text" class="form-control"  id="nom"
								[(ngModel)] = "newBuilding.reference" name="address"	name="nomSite"	
								required />
								
							<p *ngIf="name.control.hasError('required')&& (name.touched)"
							class="alert alert-danger validation-message">Référence requise</p>
							
						  </div> <!--/input Reference -->
						  
						  <div class="form-group"><!-- select-->
							<label for="site_id"> Site: </label>
							<select  #selectSite="ngModel" class="form-control"  id="site_id" name="site_id" [(ngModel)]="newBuilding.site_id" >
								<option *ngFor="let site of sites_list"
								[value]="site.site_id">Site : {{site.site_id }}</option>							
							</select>
							<!-- <p *ngIf="selectSite.control.hasError('required')"
							class="alert alert-danger validation-message">Veuillez selectionner un Site</p> -->
						  </div><!-- /select-->
						  
						  <div id="error" [ngStyle]="{'color':'red'}"> {{errorMessage}}</div>			  
						  <button id="send" type="submit" (click)="addNewBuilding()"  class="btn btn-default" [disabled]="formBuilding.invalid" >Submit</button>					
						</form>	
				</div><!-- form batiment-->